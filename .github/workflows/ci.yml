name: CI

on: [push, pull_request]

defaults:
  run:
    shell: bash

env:
  GST_GIT_REPO: https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs.git
  GST_GIT_BRANCH: main
  RPI_DIR: /rpi-tools/arm-bcm2708/arm-linux-gnueabihf
  RPI_SYSROOT: ${{ env.RPI_DIR }}/arm-linux-gnueabihf/sysroot
  RPI_LINKER: ${{ env.RPI_DIR }}/bin/arm-linux-gnueabihf-gcc

jobs:
  # This job must run on the runner because hashFiles() operates on the runner
  # by design, not inside the defined container (actions/runner#837).
  bust-cache:
    runs-on: ubuntu-latest
    outputs:
      container_version: ${{ steps.container.outputs.version }}
      spotify_src: ${{ steps.gstsrc.outputs.hash }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Find latest container version
      id: container
      run: |
        echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
    
    - name: Checkout gst-plugins-rs
      run: git clone --depth 1 -b ${{ env.GST_GIT_BRANCH }} ${{ env.GST_GIT_REPO }}

    - name: Find latest spotify src commit
      id: gstsrc
      run: |
        echo "hash=$(git -C gst-plugins-rs rev-parse --short HEAD:audio/spotify)" >> $GITHUB_OUTPUT

  main:
    strategy:
      fail-fast: false
      matrix:
        include:
        - rust_target: arm-unknown-linux-gnueabihf
          linker: arm-linux-gnueabihf
          rust_flags: -C linker=${{ env.RPI_LINKER }} -L${{ env.RPI_SYSROOT }}/lib -L{{ env.RPI_SYSROOT }}/usr/lib
    runs-on: ubuntu-20.04
    container: ghcr.io/mopidy/gst-plugin-spotify-build:latest
    needs: bust-cache
    env:
      GST_PLUGIN: gst-plugin-spotify
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: ${{ matrix.rust_target }}
        
    - name: Checkout gst-plugins-rs
      run: |
        git clone --depth 1 -b ${{ env.GST_GIT_BRANCH }} ${{ env.GST_GIT_REPO }}
        cp gst-plugins-rs/audio/spotify/Cargo.toml Cargo.toml.orig
    
    - name: Cache cargo stuff
      env:
        CONTAINER_VERSION: gst-plugin-spotify-build:${{ needs.bust-cache.outputs.container_version }}
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
          gst-plugins-rs/target/${{ matrix.rust_target }}/release
        key: ${{ env.CONTAINER_VERSION }}-${{ matrix.rust_target }}
        restore-keys: |
          ${{ env.CONTAINER_VERSION }}-

    - name: Install cargo deb
      run: cargo install cargo-deb
 
    - name: Configure PKG_CONFIG cross environment
      if: matrix.linker != ''
      run: |
        PKG_CONFIG_ALLOW_CROSS=1
        PKG_CONFIG_PATH="/usr/lib/${{ matrix.linker }}/pkgconfig"
        echo "PKG_CONFIG_ALLOW_CROSS=$PKG_CONFIG_ALLOW_CROSS" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Configure RUSTFLAGS
      if: matrix.rust_flags != ''
      run: |
        RUSTFLAGS="${{ matrix.rust_flags }}"
        echo $(eval "echo RUSTFLAGS=$RUSTFLAGS") >> $GITHUB_ENV
    
    - name: Build gst-plugins-rs
      run: |
        env
        cd gst-plugins-rs
        cargo build --target=${{ matrix.rust_target }} --package ${GST_PLUGIN} --release --config 'profile.release.strip = true'
   
    - name: Create deb package
      env:
        DEB_GLOB: target/${{ matrix.rust_target }}/debian/${GST_PLUGIN}_*.deb
      run: |
        echo "Append package metadata to Cargo.toml"
        cat Cargo.toml.orig Cargo.toml.deb > gst-plugins-rs/audio/spotify/Cargo.toml
        echo "Fixup target-specific library install path"
        GST_PLUGINS_DIR=$(pkg-config --variable=pluginsdir gstreamer-1.0)
        sed -i "s@%GST_PLUGINS_DIR%@$GST_PLUGINS_DIR@" > gst-plugins-rs/audio/spotify/Cargo.toml
        echo "Create package"
        cd gst-plugins-rs
        cargo deb -v --target=${{ matrix.rust_target }} --package ${GST_PLUGIN} --no-build
        DEB_PATH=$(readlink -m $(find ${{ env.DEB_GLOB }}))
        DEB_NAME=$(basename $DEB_PATH .deb)
        echo "DEB_PATH=$DEB_PATH" >> $GITHUB_ENV
        echo "DEB_NAME=$DEB_NAME" >> $GITHUB_ENV
   
    - name: Check deb
      run: dpkg-deb --field $DEB_PATH Package Architecture Version Installed-Size
   
    - name: Upload deb
      uses: actions/upload-artifact@v3
      with:
          name: ${{ env.DEB_NAME }}
          path: ${{ env.DEB_PATH }}
